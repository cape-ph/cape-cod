#!/usr/bin/env bash

sudo tee /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py <<EOF
# JUPYTERHUB CONFIGURATION FILE
# =============================
import jwt
import boto3
import traceback

c = get_config() #noqa

# Administrative users
# --------------------
c.Authenticator.admin_users = set([{% for aa in admins %}"{{ aa }}",{% endfor %}])

c.JupyterHub.authenticator_class = "local-generic-oauth"

# OAuth2 application info
# -----------------------
c.LocalGenericOAuthenticator.client_id = "{{ cognito_client_id }}"
c.LocalGenericOAuthenticator.client_secret = "{{ cognito_client_secret }}"
c.LocalGenericOAuthenticator.oauth_callback_url = "https://{{ domain }}/hub/oauth_callback"

# Identity provider info
# ----------------------
c.LocalGenericOAuthenticator.login_service = "CAPE SSO"
c.LocalGenericOAuthenticator.authorize_url = "{{ cognito_domain }}/oauth2/authorize"
c.LocalGenericOAuthenticator.token_url = "{{ cognito_domain }}/oauth2/token"
c.LocalGenericOAuthenticator.userdata_url = "{{ cognito_domain }}/oauth2/userInfo"
c.LocalGenericOAuthenticator.userdata_method = "POST"
c.LocalGenericOAuthenticator.logout_redirect_url = "{{ cognito_domain }}/logout?client_id={{ cognito_client_id }}&logout_uri=https://{{ domain }}"

# What we request about the user
# ------------------------------
c.LocalGenericOAuthenticator.username_claim = "email"

# Authentication
# --------------
c.LocalGenericOAuthenticator.allow_all = True
c.LocalGenericOAuthenticator.enable_auth_state = True

# Authorization
# -------------
async def cognito_hook(spawner):
    try:
        # Get authentication state
        auth_state = await spawner.user.get_auth_state()
        id_token = auth_state['id_token']
        # Decode JWT
        decoded = jwt.decode(id_token, options={"verify_signature": False}, audience=c.LocalGenericOAuthenticator.client_id)
        cognito_provider = decoded['iss'][8:]

        # Get cognito client
        cognito = boto3.client('cognito-identity', region_name="{{ aws_region }}")

        # Retrieve credentials using login
        logins = { cognito_provider: id_token }
        # TODO: make identity pool id a template
        identity_id = cognito.get_id(IdentityPoolId="us-east-2:abdc6e83-bc17-487b-a391-9c63a0f7cd56", Logins=logins)['IdentityId']
        credentials = cognito.get_credentials_for_identity(IdentityId=identity_id, Logins=logins)['Credentials']

        # Set AWS environment variables with IAM credentials
        spawner.environment['AWS_DEFAULT_REGION'] = "{{ aws_region }}"
        spawner.environment['AWS_ACCESS_KEY_ID'] = credentials['AccessKeyId']
        spawner.environment['AWS_SECRET_ACCESS_KEY'] = credentials['SecretKey']
        spawner.environment['AWS_SESSION_TOKEN'] = credentials['SessionToken']
    except:
        spawner.log.error(traceback.format_exc())

c.Spawner.pre_spawn_hook = cognito_hook

# Local Users
# -----------
c.LocalGenericOAuthenticator.create_system_users = True
c.LocalGenericOAuthenticator.add_user_cmd = ["adduser", "--badname", "-m", "-G", "jupyterhub-users"]
EOF

sudo systemctl restart jupyterhub.service
