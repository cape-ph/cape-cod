openapi: "3.0.1"
{#
    TODO:
    - ensure domain comes into here as a template variable and not hard coded
    - ensure default stage name comes into here as a template variable and not
      hard coded (replace capi-dev in here)
    - lots of DRY violate. figure out things that can be injected as template
      snippets, OAPI reusable components, etc
    - consider overriding authorizers at the method level to allow fine-grained
      scoping and to have different authorizers for different endpoints.
    - sit down and write out the paths for the API. everything right now is just
      to get things rolling for the few endpoints we need to test with
    - CORS lockdown/response headers
    - add GET for object metadata (info about files in s3)
#}
{#
    NOTE:
        we do not provide x-amazon-apigateway-endpoint-configuration here (
        setting up the vpc endpoint) as we expect that to be set in the pulumi
        code setting up the RestApi. Don't want AWS ids in the repo
#}
info:
    title: "CAPE common API"
    description:
        "CAPE common API (***TODO: add more comment***)"
    version: "2025-06-04T17:31:46.429617Z"
servers:
    - url: "https://{{ domain }}/{basePath}"
      variables:
          basePath:
              # This value needs to map to the stage name exposed via the ALB
              default: "capi-dev"

{% if authorizers %}
security:
    {% for authorizer_name, _ in authorizers.items() %}
    # NOTE: some authorizer types (e.g. oauth2) require scopes be defined which
    #      would be done in place of the `[]` below
    - {{ authorizer_name }}: []
    {% endfor %}
{% endif %}

paths:
    {#
        TODO: The object storage URI paths should be formalized to match other
              api things
    #}
    /rawobjstorage:
        get:
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: array
                                description:
                                    "An array of raw object storage info subject
                                    to the calling user's authz setup."
                                items:
                                    type: object
                                    properties:
                                        objstore_name:
                                            type: string
                                            description: An object store name
                                        prefixes:
                                            type: array
                                            description:
                                                Array of names of prefixes in
                                                the object store
                                            items:
                                               type: string
                                               description:
                                                    A name of a prefix the user can write
                                                    to for the outer-scoped
                                                    object store.
                "500":
                    description:
                        "Server Error - Unable to query object storage API (error occurred)."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_raw_objstore_authz_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"

    /objuploadurl:
        get:
            parameters:
                - in: query
                  name: bucket
                  schema:
                    type: string
                    description: "The name of the bucket to get a POST URL for"
                - in: query
                  name: prefix
                  schema:
                    type: string
                    description: "The object key prefix the POST URL will be
                    limited to"
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing the POST URL and form
                                    fields required for the POST."
                                properties:
                                    url:
                                        type: string
                                        description: The POST URL
                                    fields:
                                        type: object
                                        description:
                                            "An object containing form fields
                                            required when submitting the POST"
                "500":
                    description:
                        "Server Error - Unable to generate pre-signed raw upload
                        POST URL."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_raw_obj_upload_url_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /user/attributes:
        get:
            parameters:
                - in: query
                  name: userId
                  schema:
                    type: string
                    description: "The id of the user to get attributes for"
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing the public attributes
                                    and their values for the given user id."
                                properties:
                                    message:
                                        type: string
                                        description:
                                            "Informational message"
                                    attributes:
                                        type: object
                                        description:
                                            "An object containing public user
                                            attributes"
                "500":
                    description:
                        "Server Error - Unable to fetch user attributes"
                "default":
                    description: "Client Error"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing the public attributes
                                    and their values for the given user id."
                                properties:
                                    message:
                                        type: string
                                        description:
                                            "Error message"
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{handlers['get_user_attributes_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /user/attribute:
        get:
            parameters:
                - in: query
                  name: userId
                  schema:
                    type: string
                    description: "The id of the user to get attributes for"
                - in: query
                  name: attrName
                  schema:
                    type: string
                    description: "The name of the attribute to get the value for"
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing the requested
                                    attribute and its value."
                "500":
                    description:
                        "Server Error - Unable to fetch user attributes"
                "default":
                    description: "Client Error"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing information about the
                                    error."
                                properties:
                                    message:
                                        type: string
                                        description:
                                            "Error message"
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{handlers['get_user_attribute_val_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /objstorage/contents:
        get:
            parameters:
                - in: query
                  name: bucket
                  schema:
                    type: string
                    description: "The name of the bucket to get contents of"
                  required: true
                - in: query
                  name: prefix
                  schema:
                    type: string
                    description: "The optional object key prefix to limit
                    results to"
                  required: false
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:

                                type: array
                                description:
                                    "An array of objects containing information
                                    about objects in the desired object storage
                                    location."
                                items:
                                    type: object

                                    {# TODO: don't know yet
                                    properties:
                                        objstore_name:
                                            type: string
                                            description: An object store name
                                        prefixes:
                                            type: array
                                            description:
                                                Array of names of prefixes in
                                                the object store
                                            items:
                                               type: string
                                               description:
                                                    A name of a prefix the user can write
                                                    to for the outer-scoped
                                                    object store.
                                    #}
                {# TODO: default response (for 4xx) #}
                "500":
                    description:
                        "Server Error - Unable to query object storage API (error occurred)."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_s3_contents_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /objstorage/etls:
        get:
            parameters:
                - in: query
                  name: bucket
                  schema:
                    type: string
                    description: "The name of the bucket where the object is
                    stored"
                  required: true
                - in: query
                  name: key
                  schema:
                    type: string
                    description: "The object key to query for ETLs"
                  required: false
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: array
                                description:
                                    "An array of ETLs that relate to the object"
                                items:
                                    type: object

                                    {# TODO: don't know yet
                                    properties:
                                        etl_name:
                                            type: string
                                            description: An ETL name
                                    #}
                {# TODO: default response (for 4xx) #}
                "500":
                    description:
                        "Server Error - Unable to query object API (error occurred)."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_object_etls_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /objstorage/crawler:
        get:
            parameters:
                - in: query
                  name: bucket
                  schema:
                    type: string
                    description: "The name of the bucket where the object is
                    stored"
                  required: true
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing information about the crawler that relates to the bucket"
                                properties:
                                    crawler_name:
                                        type: string
                                        description: "A Glue Crawler name"
                {# TODO: default response (for 4xx) #}
                "500":
                    description:
                        "Server Error - Unable to query object API (error occurred)."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_bucket_crawler_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /dap/pipelines:
        get:
            responses:
                "200":
{#
    TODO: need the response headers (i.e. cors)
#}
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: array
                                description:
                                    "An array of available pipelines to run."
                                items:
                                    type: object
                                    properties:
                                        display_name:
                                            type: string
                                            description: The pipeline name for display
                                        pipeline_name:
                                            type: string
                                            description: The pipeline name
                                        pipeline_type:
                                            type: string
                                            description:
                                                The type of pipeline execution
                                                environment (e.g. 'nextflow')
                                        version:
                                            type: string
                                            description: The pipeline version
                                        profiles:
                                            type: array
                                            description: array of profiles available for a pipeline
                                            items:
                                                type: object
                                                properties:
                                                    key:
                                                        type: string
                                                        description: The key for the profile in object storage
                                                    profile_name:
                                                        type: string
                                                        description: A display name for the profile

                "500":
                    description:
                        "Server Error - Unable to read the pipeline registry."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_daps_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /dap/pipelineprofiles:
        get:
            parameters:
                - in: query
                  name: pipeline
                  schema:
                    type: string
                    description: "The name of the pipeline profiles are being fetched for"
                  required: true
                - in: query
                  name: version
                  schema:
                    type: string
                    description: "The version of the pipeline profiles are being fetched for"
                  required: true
            responses:
                "200":
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: array
                                description:
                                    "An array of available profiles for the pipeline/version pair"
                                items:
                                    type: object
                                    properties:
                                        key:
                                            type: string
                                            description: The key for the profile in object storage
                                        profileName:
                                            type: string
                                            description: A display name for the profile
                {# TODO: default response (for 4xx) #}
                "500":
                    description:
                        "Server Error - Unable to query object API (error occurred)."
            x-amazon-apigateway-integration:
                # this is the integration http method, not the endpoint http method. all lambda backed
                # integrations are post
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_dap_profiles_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /dap/executors:
        get:
            responses:
                "200":
{#
    TODO: need the response headers (i.e. cors)
#}
                    description: "Success"
                    content:
                        application/json:
                            schema:
                                type: array
                                description:
                                    "An array of available pipeline executors."
                                items:
                                    type: object
                                    properties:
                                        instance_id:
                                            type: string
                                            description:
                                                The ID of the executor EC2
                                                instance
                                        instance_name:
                                            type: string
                                            description:
                                                The name of the executor EC2
                                                instance
                                        pipeline_type:
                                            type: string
                                            description:
                                                The type of pipeline supported
                                                by the executor EC2 instance.
                "500":
                    description:
                        "Server error while getting list of available executors."
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['get_dap_executors_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
    /dap/submit:
        post:
            requestBody:
                description: Submit a data analysis pipeline for execution.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                pipelineName:
                                    type: string
                                    description: The name of the pipeline to run
                                pipelineVersion:
                                    type: string
                                    description:
                                        The version of the pipeline to run
                                outputPath:
                                    type: string
                                    description: >
                                        The S3 location to put pipeline output.
                                        Assumes permissions are set correctly.
{#
    TODO: ISSUE #TBD all below fields are specific to bactopia right now. also, the
          descriptions are bunk if we keep using these params
#}
                                nextflowOptions:
                                    type: string
                                    description: The command line flags to pass to Nextflow
            responses:
                "200":
{#
    TODO: need the response headers (i.e. cors)
#}
                    description: "Success submitting pipeline for execution."
                    content:
                        application/json:
                            schema:
                                type: object
                                description:
                                    "An object containing information about the successfully submitted job"
                                properties:
                                    jobArn:
                                        type: string
                                        description: "The submitted job ARN"
                                    jobId:
                                        type: string
                                        description: "The submitted job ID"
                                    jobName:
                                        type: string
                                        description: "The submitted job name"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{ handlers['submit_dap_run_handler'] }}/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                type: "aws_proxy"
        options:
            responses:
                "200":
                    $ref: "#/components/responses/200OptionsCors"
            x-amazon-apigateway-integration:
              responses:
                default:
                    statusCode: "200"
                    responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
              requestTemplates:
                  application/json: "{'statusCode':200}"
              passthroughBehavior: "when_no_match"
              timeoutInMillis: 29000
              type: "mock"
# resusable components that follow OpenApi 3.0.1 spec
components:
    responses:
        200OptionsCors:
            description: "200 response"
            headers:
                Access-Control-Allow-Origin:
                    schema:
                        type: "string"
                Access-Control-Allow-Methods:
                    schema:
                        type: "string"
                Access-Control-Allow-Headers:
                    schema:
                        type: "string"
            content: {}
{#
    TODO: This securityScheme stuff was setup for the DAP API that did no
          authorizers or anything. We have a lambda authorizer now and it wants
          JWTs in headers. so need to re-assess this for that purpose.
#}

    # if we have one or more authorizers defined, we need to render them here
    {% if authorizers %}
    securitySchemes:
        {% for authorizer_name, authorizer_def in authorizers.items() %}
        {{ authorizer_name }}:
{#
    TODO: this will only work for `request` type authorizers right now that have
          identity sources as query string params and or header vals to check.
          will need some work to support oauth2, oidc, single header, jwt, etc
          setups
#}
{#
    TODO: this block (type/name/in) should not be changed for AWS
          `request` lambda authorizers that use query params. when we
           change to token or whatever this stuff will change
#}
            type: apiKey
            name: Unused
            in: header
{#
    TODO: assumes custom (i.e. lambda) authtype currently
#}
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
                type : "{{ authorizer_def['type'] }}"
                {#
                    identity source is not required, but specifying one will
                    fail the API calls if that source is not present in the
                    request. ao until we know what will always be there, we'll
                    allow an empty value here and will just not set an identity
                    source unless told to.
                #}
                {% if authorizer_def["identity_sources"] %}
                identitySource: "{{ authorizer_def['identity_sources'] }}"
                {% endif %}
                authorizerCredentials: "{{ authorizer_def['role'] }}"
                authorizerUri: "{{ authorizer_def['uri'] }}"
                authorizerResultTtlInSeconds: {{ authorizer_def['result_cached_sec'] }}
        {% endfor %}
    {% endif %}

{#
    NOTE:
        we do not provide x-amazon-apigateway-policy here (setting up the
        policy for using the API) as we expect that to be set in the pulumi
        code setting up the RestApi. Don't want AWS ids and perms in the repo
#}
